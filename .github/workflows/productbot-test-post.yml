name: ProductBot - Test Post (Immediate)

on:
  workflow_dispatch:
    inputs:
      script_path:
        description: "Path to your bot script (or 'auto' to detect)"
        required: true
        default: "auto"
        type: string
      openai_model:
        description: "OpenAI model"
        required: false
        default: "gpt-4o-mini"
        type: string
      dry_run:
        description: "If your script supports DRY_RUN, set true to avoid posting"
        required: false
        default: "false"
        type: choice
        options: ["false", "true"]

permissions:
  contents: read

concurrency:
  group: productbot-test
  cancel-in-progress: false

jobs:
  test-post:
    name: Post Now
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Repo snapshot (debug)
        run: |
          pwd
          echo "Workspace: $GITHUB_WORKSPACE"
          echo "Top-level:"
          ls -la
          echo "Python files (≤ depth 5):"
          find . -maxdepth 5 -type f -name "*.py" -print0 | xargs -0 -I{} echo "{}" | sed 's|^\./||' | sort

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -V
          pip install --upgrade pip
          pip install tweepy openai

      - name: Resolve script path
        id: resolve
        shell: bash
        run: |
          set -euo pipefail
          INPUT="${{ github.event.inputs.script_path }}"

          pick_first_match () {
            # print first argument that exists as a file
            for p in "$@"; do
              if [[ -f "$p" ]]; then
                echo "$p"
                return 0
              fi
            done
            return 1
          }

          if [[ "${INPUT}" != "auto" ]]; then
            [[ -f "$INPUT" ]] || { echo "::error file=$INPUT::Given script path not found"; exit 1; }
            echo "BOT_SCRIPT=$INPUT" >> "$GITHUB_ENV"
          else
            # Candidates (broad patterns; handle spaces)
            mapfile -t CANDS < <(git ls-files '*.py' | grep -Ei \
              -e '(^|/)product[ _-]?bot.*\.py$' \
              -e '(^|/)rightleftbot\.py$' \
              -e '(^|/)future.*bot.*\.py$' \
              -e '(^|/)bot.*product.*\.py$' \
              || true)

            if [[ ${#CANDS[@]} -eq 0 ]]; then
              # Fallback: find
              mapfile -t CANDS < <(find . -maxdepth 6 -type f -name "*.py" -print | sed 's|^\./||' | sort)
            fi

            if [[ ${#CANDS[@]} -gt 0 ]]; then
              # Prefer “Product Bot V2/…”; else any *product*bot*; else first
              PREF=$(printf '%s\n' "${CANDS[@]}" | grep -E '^Product Bot V2/.*\.py$' | head -n1 || true)
              if [[ -n "${PREF:-}" ]]; then
                echo "BOT_SCRIPT=$PREF" >> "$GITHUB_ENV"
              else
                PREF=$(printf '%s\n' "${CANDS[@]}" | grep -Ei 'product[ _-]?bot.*\.py$' | head -n1 || true)
                if [[ -n "${PREF:-}" ]]; then
                  echo "BOT_SCRIPT=$PREF" >> "$GITHUB_ENV"
                else
                  echo "BOT_SCRIPT=${CANDS[0]}" >> "$GITHUB_ENV"
                fi
              fi
            else
              echo "::error::Could not locate any .py scripts."
              exit 1
            fi
          fi

          echo "Using BOT_SCRIPT=${BOT_SCRIPT:-<none>}"
          [[ -n "${BOT_SCRIPT:-}" ]] || { echo "::error::BOT_SCRIPT not set"; exit 1; }

      - name: Locate products.csv (optional)
        id: prodcsv
        shell: bash
        run: |
          set -euo pipefail
          # Try to find a products.csv near the script or anywhere in repo
          base="$(dirname "$BOT_SCRIPT")"
          try1="$base/products.csv"
          if [[ -f "$try1" ]]; then
            echo "PRODUCT_CSV=$try1" >> "$GITHUB_ENV"
          else
            found="$(git ls-files | grep -E '/?products\.csv$' | head -n1 || true)"
            if [[ -n "$found" && -f "$found" ]]; then
              echo "PRODUCT_CSV=$found" >> "$GITHUB_ENV"
            fi
          fi
          echo "PRODUCT_CSV=${PRODUCT_CSV:-<auto not found>}"

      - name: Run ProductBot (LIVE)
        env:
          # Required secrets
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
          TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_SECRET: ${{ secrets.TWITTER_ACCESS_SECRET }}

          # Optional knobs
          OPENAI_MODEL: ${{ github.event.inputs.openai_model }}
          AFFILIATE_TAG: futurebutnotn-20
          TRACKING_IDS_BY_MODE: '{"spiky":"futurebutnotn-20","confession":"futurebutnotn-21","problem_fix":"futurebutnotn-22","brand_tax":"futurebutnotn-23","micro_drill":"futurebutnotn-24","two_choice":"futurebutnotn-25"}'
          DRY_RUN: ${{ github.event.inputs.dry_run }}

          # Make local imports (utils/) work
          PYTHONPATH: ${{ github.workspace }}

          # Export located CSV if found
          PRODUCT_CSV: ${{ env.PRODUCT_CSV }}
        run: |
          set -euo pipefail
          echo "Running: $BOT_SCRIPT"
          python "$BOT_SCRIPT"

      - name: Upload artifacts (logs/state)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: productbot-artifacts-${{ github.run_id }}
          path: |
            **/logs/**
            **/state/**
            **/tweet_logs.csv
            **/metrics.csv
            **/bandit.json
          if-no-files-found: ignore
